Ddoc

$(H2 [oitavo](https://oitavo.github.io) /
     [simulado](https://oitavo.github.io/simulado) /
     [$(TITLE)](./estacionamento.html)
)
$(BR)
***********************************************************************
# C++ source code:
---
#include <bits/stdc++.h>

int main () {
    int C, N, i, j, vgs, val, aux,
        cmd[3], plcs[10005][2];
    char in[20], bff[1005], vagas[1005] = {0},
         *it, *ptr = &bff[0];
    
    while (~scanf("%d %d", &C, &N)) {
        vgs = C;
        val = 0;
        while (N--) {
            scanf(" %[^\n]s", &in);
            it = strtok(in, " ");
            cmd[0] = *it;
            cmd[1] = atoi(it + 2);

            if (cmd[0] == 'S') {
                vgs += plcs[cmd[1]][0];
                aux = plcs[cmd[1]][1] + plcs[cmd[1]][0];
                for (i = plcs[cmd[1]][1]; i < aux; ++i)
                    vagas[i] = 0;
            } else {
                cmd[2] = atoi(it + 7);
                if (cmd[2] <= vgs)
                    for (i = 1, aux = 0; i <= C; ++i) {
                        if (!vagas[i]) {
                            if (++aux == cmd[2]) {
                                plcs[cmd[1]][0] = cmd[2];
                                plcs[cmd[1]][1] = i - cmd[2] + 1;
                                vgs -= cmd[2];
                                while (aux--) vagas[i--] = 1;
                                val += 10;
                                break;
                            }
                        } else aux = 0;
                    }
            }
        }
        ptr += sprintf(ptr, "%d\n", val);
        for (i = 1; i <= C; ++i) vagas[i] = 0;
    }
    printf("%s", bff);
    return 0;
}
---
$(BR)
************************************************************************
# D source code:
---
import std.stdio;
import std.string;
import std.conv;
import std.array;

void main ()
{
    int[2][string] plcs;
    int C, N, i, vgs, val, aux, tm;
    bool[1005] vagas;
    string[] cmd;
    auto bff = appender!string();

    while (readf(" %s %s ", &C, &N))
    {
        vagas[] = false;
        val = 0;
        vgs = C;
        while (N--)
        {
            cmd = split(strip(readln()));
            if (cmd[0] == "S")
            {
                aux = plcs[cmd[1]][0];
                vgs += plcs[cmd[1]][1];
                vagas[aux .. aux + plcs[cmd[1]][1]] = false;
            }
            else
            {
                tm = to!short(cmd[2]);
                if (vgs >= tm)
                {
                    for (aux = i = 1; i <= C; ++i)
                    {
                        if (vagas[i])
                        {
                            aux = 1;
                        }
                        else if(aux++ == tm)
                        {
                            plcs[cmd[1]] = [i - tm + 1, tm];
                            vagas[plcs[cmd[1]][0] .. i + 1] = true;
                            val += 10;
                            vgs -= tm;
                            break;
                        }  // end else
                    }  // for i
                }  //  end if
            }  // end else
        }  // while (N--)
        bff.put(format("%d\n", val));
    }  // while(readf)
    write(bff.data);
}  // main
---
